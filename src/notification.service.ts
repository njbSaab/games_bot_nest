import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from './prisma.service';
import axios from 'axios';
import axiosRetry from 'axios-retry';

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);
  private readonly allowedUserIds: string[];
  private readonly adminTelegramIds: string[];
  private readonly botToken: string;
  private readonly axiosInstance = axios.create();

  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
  ) {
    this.allowedUserIds = this.configService.get<string>('ALLOWED_TELEGRAM_IDS', '7066816061').split(',');
    this.adminTelegramIds = this.configService.get<string>('ADMIN_TELEGRAM_IDS', '7066816061').split(',').filter(id => id.trim() !== '');
    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN', '');
    this.logger.log(`NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, adminTelegramIds: ${this.adminTelegramIds.join(', ')}, botToken: ${this.botToken ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);

    axiosRetry(this.axiosInstance, {
      retries: 3,
      retryDelay: (retryCount) => retryCount * 1000,
      retryCondition: (error) =>
        error.response?.status === 429 ||
        error.response?.status >= 500 ||
        error.code === 'ECONNABORTED' ||
        error.code === 'ENOTFOUND',
    });

    if (!this.adminTelegramIds.length) {
      this.logger.warn('ADMIN_TELEGRAM_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.');
    }
    if (!this.botToken) {
      this.logger.error('TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.');
    }
    if (this.adminTelegramIds.includes('7445683137')) {
      this.logger.warn('ADMIN_TELEGRAM_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç ID –±–æ—Ç–∞ (7445683137), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ ID –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }
  }

  private escapeMarkdownV2(text: string): string {
    return text.replace(/([_*[\]()~`>#+\-=|{:}.!])/g, '\\$1');
  }

  private async sendTelegramMessage(chatId: string, message: string): Promise<boolean> {
    if (!this.botToken) {
      this.logger.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      return false;
    }

    if (chatId === '7445683137') {
      this.logger.warn(`–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chatId ${chatId}: —ç—Ç–æ ID –±–æ—Ç–∞`);
      return false;
    }

    const maxMessageLength = 4096;
    if (message.length > maxMessageLength) {
      this.logger.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chatId ${chatId} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (${message.length} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º`);
      const messages = [];
      for (let i = 0; i < message.length; i += maxMessageLength) {
        messages.push(message.slice(i, i + maxMessageLength));
      }
      let success = true;
      for (const chunk of messages) {
        try {
          await this.axiosInstance.post(
            `https://api.telegram.org/bot${this.botToken}/sendMessage`,
            {
              chat_id: chatId,
              text: chunk,
              parse_mode: 'MarkdownV2',
            },
            { timeout: 15000 },
          );
          this.logger.debug(`–ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ chatId ${chatId}`);
        } catch (error) {
          this.logger.error(
            `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chatId ${chatId}: ${error.message}, response: ${JSON.stringify(error.response?.data)}`,
          );
          success = false;
        }
      }
      return success;
    }

    try {
      await this.axiosInstance.post(
        `https://api.telegram.org/bot${this.botToken}/sendMessage`,
        {
          chat_id: chatId,
          text: message,
          parse_mode: 'MarkdownV2',
        },
        { timeout: 15000 },
      );
      this.logger.debug(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ chatId ${chatId}`);
      return true;
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chatId ${chatId}: ${error.message}, response: ${JSON.stringify(error.response?.data)}`,
      );
      return false;
    }
  }

  async notifyError(
    resource: { id: number; name: string; url: string; type: string; interval: number; userId?: string },
    errorMessage: string,
    statusCode?: string | number,
  ): Promise<boolean> {
    if (!this.botToken) {
      this.logger.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      return false;
    }
    if (!this.adminTelegramIds.length) {
      this.logger.warn('ADMIN_TELEGRAM_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return false;
    }

    const date = new Date().toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false,
    }).replace(',', ' -');

    const formattedMessage = this.escapeMarkdownV2(
      `üìå ${date} - –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùå\n` +
        `ID: ${resource.id}\n` +
        `Name: ${resource.name}\n` +
        `Url: ${resource.url}\n` +
        `Type: ${resource.type}\n` +
        `Interval: ${resource.interval} –º–∏–Ω\n` +
        `–û—à–∏–±–∫–∞: ${errorMessage.slice(0, 200)}\n` +
        (statusCode ? `–ö–æ–¥ –æ—à–∏–±–∫–∏: ${statusCode}\n` : '') +
        `–ü—Ä–∏—á–∏–Ω–∞: ${errorMessage.includes('success: false') ? '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞' : '–°–µ—Ç–µ–≤–æ–π —Å–±–æ–π –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}\n` +
        `–õ–æ–≥–∏: /logs ${resource.id}`,
    );

    let success = true;
    for (const chatId of this.adminTelegramIds) {
      const result = await this.sendTelegramMessage(chatId, formattedMessage);
      if (result) {
        this.logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      } else {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId}`);
        success = false;
      }
    }
    return success;
  }

  async notify(message: string): Promise<boolean> {
    if (!this.botToken) {
      this.logger.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      return false;
    }
    if (!this.adminTelegramIds.length) {
      this.logger.warn('ADMIN_TELEGRAM_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return false;
    }

    const escapedMessage = this.escapeMarkdownV2(message);
    let success = true;
    for (const chatId of this.adminTelegramIds) {
      const result = await this.sendTelegramMessage(chatId, escapedMessage);
      if (result) {
        this.logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      } else {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId}`);
        success = false;
      }
    }
    return success;
  }

  async getResourcesByTelegramId(telegramId: string): Promise<any[]> {
    if (!this.allowedUserIds.includes(telegramId)) {
      this.logger.warn(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ userId: ${telegramId}`);
      return [];
    }

    let attempts = 3;
    let delay = 1000;
    while (attempts > 0) {
      try {
        const where = this.allowedUserIds.includes(telegramId) ? {} : { userId: telegramId };
        const resources = await this.prisma.resource.findMany({ where });
        this.logger.debug(`–ù–∞–π–¥–µ–Ω–æ ${resources.length} —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è userId: ${telegramId}`);
        return resources;
      } catch (error) {
        attempts--;
        this.logger.error(
          `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è userId ${telegramId}, –ø–æ–ø—ã—Ç–∫–∞ ${4 - attempts}/3: ${error.message}, stack: ${error.stack}`,
        );
        if (attempts === 0) {
          this.logger.error(`–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è userId ${telegramId} –∏—Å—á–µ—Ä–ø–∞–Ω—ã`);
          return [];
        }
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay *= 2;
      }
    }
    return [];
  }

  async getLogsByResourceId(resourceId: number): Promise<any[]> {
    let attempts = 3;
    let delay = 1000;
    while (attempts > 0) {
      try {
        const logs = await this.prisma.log.findMany({
          where: { resourceId },
          orderBy: { createdAt: 'desc' },
        });
        this.logger.debug(`–ù–∞–π–¥–µ–Ω–æ ${logs.length} –ª–æ–≥–æ–≤ –¥–ª—è resourceId: ${resourceId}`);
        return logs;
      } catch (error) {
        attempts--;
        this.logger.error(
          `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –¥–ª—è resourceId ${resourceId}, –ø–æ–ø—ã—Ç–∫–∞ ${4 - attempts}/3: ${error.message}, stack: ${error.stack}`,
        );
        if (attempts === 0) {
          this.logger.error(`–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –¥–ª—è resourceId ${resourceId} –∏—Å—á–µ—Ä–ø–∞–Ω—ã`);
          return [];
        }
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay *= 2;
      }
    }
    return [];
  }
}