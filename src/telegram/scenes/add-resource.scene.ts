import { Scene, SceneEnter, Ctx, Action, On } from 'nestjs-telegraf';
import { Scenes, Markup } from 'telegraf';
import { Logger } from '@nestjs/common';
import { ResourceManagementService } from '../resource-management.service';
import { BotKeyboard } from '../bot.keyboard';

interface AddResourceState {
  name?: string;
  url?: string;
  type?: string;
  interval?: number;
  frequency?: number;
  period?: string;
}

@Scene('add_resource_scene')
export class AddResourceScene {
  private readonly logger = new Logger(AddResourceScene.name);

  constructor(private readonly resourceManagementService: ResourceManagementService) {}

  private escapeMarkdownV2(text: string): string {
    const escapedText = text.replace(/([_*[\]()~`>#+\-=|{:}.!])/g, '\\$1');
    this.logger.debug(`–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${escapedText}`);
    return escapedText;
  }

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: Scenes.SceneContext) {
    this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –≤–æ—à—ë–ª –≤ —Å—Ü–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞`);
    await ctx.reply(
      this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ—Å—É—Ä—Å–∞:'),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]).reply_markup,
      }
    );
    ctx.scene.session.state = {} as AddResourceState;
  }

  @On('text')
  async onText(@Ctx() ctx: Scenes.SceneContext & { message: { text: string } }) {
    const state = ctx.scene.session.state as AddResourceState;
    const text = ctx.message.text.trim();

    if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
      await ctx.reply(
        this.escapeMarkdownV2('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
      );
      await ctx.scene.leave();
      return;
    }

    if (!state.name) {
      state.name = text;
      await ctx.reply(
        this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ URL —Ä–µ—Å—É—Ä—Å–∞:'),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]).reply_markup,
        }
      );
    } else if (!state.url) {
      let url = text;
      if (!url.match(/^https?:\/\//)) {
        url = `https://${url}`;
      }
      try {
        new URL(url);
      } catch {
        await ctx.reply(
          this.escapeMarkdownV2('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com):'),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]).reply_markup,
          }
        );
        return;
      }
      state.url = url;
      await ctx.reply(
        this.escapeMarkdownV2('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞:'),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.button.callback('site', 'type_static'),
              Markup.button.callback('mail', 'type_mailer'),
              Markup.button.callback('telegramBot', 'type_telegram'),
            ],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
          ]).reply_markup,
        }
      );
    } else if (!state.type) {
      if (!['static', 'mailer', 'telegram'].includes(text.toLowerCase())) {
        await ctx.reply(
          this.escapeMarkdownV2('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø. –í—ã–±–µ—Ä–∏—Ç–µ static, mailer, telegram:'),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
              [
                Markup.button.callback('site', 'type_static'),
                Markup.button.callback('mail', 'type_mailer'),
                Markup.button.callback('telegramBot', 'type_telegram'),
              ],
              [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]).reply_markup,
          }
        );
        return;
      }
      state.type = text.toLowerCase();
      await ctx.reply(
        this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –º–∏–Ω–∏–º—É–º 1):'),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]).reply_markup,
        }
      );
    } else if (!state.interval) {
      const interval = parseInt(text, 10);
      if (isNaN(interval) || interval < 1) {
        await ctx.reply(
          this.escapeMarkdownV2('–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]).reply_markup,
          }
        );
        return;
      }
      state.interval = interval;
      await ctx.reply(
        this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫ (—á–∏—Å–ª–æ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):'),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_frequency')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
          ]).reply_markup,
        }
      );
    } else if (!state.frequency && state.frequency !== 0) {
      if (text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.frequency = undefined;
        await ctx.reply(
          this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, daily, weekly, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):'),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_period')],
              [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]).reply_markup,
          }
        );
      } else {
        const frequency = parseInt(text, 10);
        if (isNaN(frequency) || frequency < 1) {
          await ctx.reply(
            this.escapeMarkdownV2('–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":'),
            {
              parse_mode: 'MarkdownV2',
              reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_frequency')],
                [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
              ]).reply_markup,
            }
          );
          return;
        }
        state.frequency = frequency;
        await ctx.reply(
          this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, daily, weekly, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):'),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_period')],
              [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]).reply_markup,
          }
        );
      }
    } else {
      state.period = text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? undefined : text;
      try {
        const resource = await this.resourceManagementService.addResource({
          name: state.name!,
          url: state.url!,
          type: state.type!,
          interval: state.interval!,
          userId: ctx.from?.id?.toString() || '7066816061',
          frequency: state.frequency,
          period: state.period,
        });
        await ctx.reply(
          this.escapeMarkdownV2(
            `–†–µ—Å—É—Ä—Å ${state.name} (ID: ${resource.id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å, —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è (${state.interval} –º–∏–Ω—É—Ç) –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è!\n` +
            `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ üëâ: /status`
          ),
          { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
        );
        await ctx.scene.leave();
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞: ‚Ä¢ ${error.message}`);
        await ctx.reply(
          this.escapeMarkdownV2(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞: –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ ‚Ä¢ \n${error.message}`),
          { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
        );
        await ctx.scene.leave();
      }
    }
  }

  @Action('cancel')
  async onCancel(@Ctx() ctx: Scenes.SceneContext) {
    await ctx.reply(
      this.escapeMarkdownV2('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.'),
      { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
    );
    await ctx.answerCbQuery();
    await ctx.scene.leave();
  }

  @Action(/type_(static|mailer|telegram)/)
  async onTypeSelect(@Ctx() ctx: Scenes.SceneContext & { match: RegExpExecArray }) {
    const state = ctx.scene.session.state as AddResourceState;
    state.type = ctx.match[1];
    await ctx.reply(
      this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –º–∏–Ω–∏–º—É–º 1):'),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('skip_frequency')
  async onSkipFrequency(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as AddResourceState;
    state.frequency = undefined;
    await ctx.reply(
      this.escapeMarkdownV2('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, daily, weekly, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):'),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_period')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('skip_period')
  async onSkipPeriod(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as AddResourceState;
    state.period = undefined;
    try {
      const resource = await this.resourceManagementService.addResource({
        name: state.name!,
        url: state.url!,
        type: state.type!,
        interval: state.interval!,
        userId: ctx.from?.id?.toString() || '7066816061',
        frequency: state.frequency,
        period: state.period,
      });
      await ctx.reply(
        this.escapeMarkdownV2(
          `–†–µ—Å—É—Ä—Å ${state.name} (ID: ${resource.id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å, —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è (${state.interval} –º–∏–Ω—É—Ç) –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è!\n` +
          `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ üëâ: /status`
        ),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
      );
      await ctx.scene.leave();
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞: ${error.message}`);
      await ctx.reply(
        this.escapeMarkdownV2(`–û—à–∏–±–∫–∞: ${error.message}`),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
      );
      await ctx.scene.leave();
    }
    await ctx.answerCbQuery();
  }
}