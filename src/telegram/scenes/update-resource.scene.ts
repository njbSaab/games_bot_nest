import { Scene, SceneEnter, Ctx, Action, On, Command } from 'nestjs-telegraf';
import { Scenes, Markup } from 'telegraf';
import { Logger } from '@nestjs/common';
import { NotificationService } from '../../notification.service';
import { ResourceManagementService } from '../resource-management.service';
import { BotKeyboard } from '../bot.keyboard';

interface UpdateResourceState {
  resourceId?: number;
  name: string | null;
  url: string | null;
  type: string | null;
  interval: number | null;
  frequency: number | null;
  period: string | null;
  resource?: any;
}

@Scene('update_resource_scene')
export class UpdateResourceScene {
  private readonly logger = new Logger(UpdateResourceScene.name);

  constructor(
    private readonly resourceManagementService: ResourceManagementService,
    private readonly notificationService: NotificationService,
  ) {}

  private escapeMarkdownV2(text: string): string {
    const escapedText = text.replace(/([_*[\]()~`>#+\-=|{:}.!])/g, '\\$1');
    this.logger.debug(`–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${escapedText}`);
    return escapedText;
  }

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: Scenes.SceneContext) {
    this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –≤–æ—à—ë–ª –≤ —Å—Ü–µ–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞`);
    const userId = ctx.from?.id?.toString();
    try {
      const resources = await this.notificationService.getResourcesByTelegramId(userId);
      this.logger.debug(`–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${resources.length}, URLs: ${resources.map(r => r.url).join(', ')}`);
      const uniqueResources = Array.from(new Map(resources.map(r => [r.url, r])).values());
      if (uniqueResources.length === 0) {
        await ctx.reply(
          this.escapeMarkdownV2('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.'),
          { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
        );
        await ctx.scene.leave();
        return;
      }
      const sortedResources = uniqueResources.sort((a, b) => a.id - b.id);
      const resourceButtons = sortedResources.map(r =>
        Markup.button.callback(`ID: ${r.id}`, `select_id_${r.id}`)
      );
      const buttonsPerRow = 4;
      const buttonRows = [];
      for (let i = 0; i < resourceButtons.length; i += buttonsPerRow) {
        buttonRows.push(resourceButtons.slice(i, i + buttonsPerRow));
      }
      buttonRows.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]);
      
      const resourceList = sortedResources
        .map(r => `üü¢ ID: ${r.id}, Name: ${r.name}, Type: ${r.type}\n URL: ${r.url}\n `)
        .join('\n');
      this.logger.debug(`üîé –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${resourceList}`);
      await ctx.reply(
        `–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ—Å—É—Ä—Å–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞:\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n${resourceList}`,
        {
          parse_mode: undefined,
          reply_markup: Markup.inlineKeyboard(buttonRows).reply_markup,
        }
      );
      ctx.scene.session.state = {} as UpdateResourceState;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${error.message}`, error.stack);
      await ctx.reply(
        this.escapeMarkdownV2('–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
      );
      await ctx.scene.leave();
    }
  }

  @Command('cancel')
  async onCancelCommand(@Ctx() ctx: Scenes.SceneContext) {
    this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞`);
    await ctx.reply(
      this.escapeMarkdownV2('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.'),
      { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
    );
    await ctx.scene.leave();
  }

  @Command('start')
  async onStartCommand(@Ctx() ctx: Scenes.SceneContext) {
    this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –ø—Ä–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –∫–æ–º–∞–Ω–¥–æ–π /start`);
    await ctx.reply(
      this.escapeMarkdownV2('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.'),
      { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
    );
    await ctx.scene.leave();
  }

  @Action('cancel')
  async onCancelAction(@Ctx() ctx: Scenes.SceneContext) {
    this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏–µ`);
    await ctx.reply(
      this.escapeMarkdownV2('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.'),
      { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
    );
    await ctx.answerCbQuery();
    await ctx.scene.leave();
  }

  @Action(/select_id_(\d+)/)
  async onSelectId(@Ctx() ctx: Scenes.SceneContext & { match: RegExpExecArray }) {
    const state = ctx.scene.session.state as UpdateResourceState;
    const resourceId = parseInt(ctx.match[1], 10);
    const userId = ctx.from?.id?.toString();
    const resources = await this.notificationService.getResourcesByTelegramId(userId);
    const resource = resources.find(r => r.id === resourceId);
    if (!resource) {
      const sortedResources = resources.sort((a, b) => a.id - b.id);
      const resourceList = sortedResources
        .map(r => `ID: ${r.id}, Name: ${r.name}, URL: ${r.url}`)
        .join('\n');
      const resourceButtons = sortedResources.map(r =>
        Markup.button.callback(`ID: ${r.id}`, `select_id_${r.id}`)
      );
      const buttonsPerRow = 4;
      const buttonRows = [];
      for (let i = 0; i < resourceButtons.length; i += buttonsPerRow) {
        buttonRows.push(resourceButtons.slice(i, i + buttonsPerRow));
      }
      buttonRows.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]);
      
      await ctx.reply(
        `–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n${resourceList}`,
        {
          parse_mode: undefined,
          reply_markup: Markup.inlineKeyboard(buttonRows).reply_markup,
        }
      );
      await ctx.answerCbQuery();
      return;
    }
    state.resourceId = resourceId;
    state.name = null;
    state.url = null;
    state.type = null;
    state.interval = null;
    state.frequency = null;
    state.period = null;
    state.resource = resource;
    this.logger.debug(`–í—ã–±—Ä–∞–Ω —Ä–µ—Å—É—Ä—Å ID: ${resourceId}, state: ${JSON.stringify(state)}`);
    const displayName = resource.name.length > 30 ? resource.name.substring(0, 27) + '...' : resource.name;
    await ctx.reply(
      this.escapeMarkdownV2(
        `–¢–µ–∫—É—â–µ–µ –∏–º—è —Ä–µ—Å—É—Ä—Å–∞: ${resource.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ—Å—É—Ä—Å–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
      ),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback(displayName, 'use_current_name')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('use_current_name')
  async onUseCurrentName(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as UpdateResourceState;
    state.name = state.resource.name;
    this.logger.debug(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –∏–º—è: ${state.name}, state: ${JSON.stringify(state)}`);
    const displayUrl = state.resource.url.length > 30 ? state.resource.url.substring(0, 27) + '...' : state.resource.url;
    await ctx.reply(
      this.escapeMarkdownV2(
        `–¢–µ–∫—É—â–∏–π URL —Ä–µ—Å—É—Ä—Å–∞: ${state.resource.url}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL —Ä–µ—Å—É—Ä—Å–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
      ),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback(displayUrl, 'use_current_url')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('use_current_url')
  async onUseCurrentUrl(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as UpdateResourceState;
    state.url = state.resource.url;
    this.logger.debug(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–µ–∫—É—â–∏–π URL: ${state.url}, state: ${JSON.stringify(state)}`);
    await ctx.reply(
      this.escapeMarkdownV2(
        `–¢–µ–∫—É—â–∏–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞: ${state.resource.type}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
      ),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('site', 'type_static'),
            Markup.button.callback('mail', 'type_mailer'),
            Markup.button.callback('telegramBot', 'type_telegram'),
          ],
          [Markup.button.callback(state.resource.type, 'use_current_type')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action(/type_(static|mailer|telegram)/)
  async onTypeSelect(@Ctx() ctx: Scenes.SceneContext & { match: RegExpExecArray }) {
    const state = ctx.scene.session.state as UpdateResourceState;
    state.type = ctx.match[1];
    this.logger.debug(`–í—ã–±—Ä–∞–Ω —Ç–∏–ø: ${state.type}, state: ${JSON.stringify(state)}`);
    await ctx.reply(
      this.escapeMarkdownV2(
        `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${state.resource.interval} –º–∏–Ω—É—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –º–∏–Ω–∏–º—É–º 1, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
      ),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback(`${state.resource.interval} –º–∏–Ω—É—Ç`, 'use_current_interval')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('use_current_type')
  async onUseCurrentType(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as UpdateResourceState;
    state.type = state.resource.type;
    this.logger.debug(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–µ–∫—É—â–∏–π —Ç–∏–ø: ${state.type}, state: ${JSON.stringify(state)}`);
    await ctx.reply(
      this.escapeMarkdownV2(
        `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${state.resource.interval} –º–∏–Ω—É—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –º–∏–Ω–∏–º—É–º 1, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
      ),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback(`${state.resource.interval} –º–∏–Ω—É—Ç`, 'use_current_interval')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('use_current_interval')
  async onUseCurrentInterval(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as UpdateResourceState;
    state.interval = state.resource.interval;
    this.logger.debug(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${state.interval}, state: ${JSON.stringify(state)}`);
    await ctx.reply(
      this.escapeMarkdownV2(
        `–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: ${state.resource.frequency ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É (—á–∏—Å–ª–æ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):`
      ),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback(state.resource.frequency ? `${state.resource.frequency}` : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'use_current_frequency')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('use_current_frequency')
  async onUseCurrentFrequency(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as UpdateResourceState;
    state.frequency = state.resource.frequency ?? null;
    this.logger.debug(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: ${state.frequency}, state: ${JSON.stringify(state)}`);
    await ctx.reply(
      this.escapeMarkdownV2(
        `–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: ${state.resource.period ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, daily, weekly, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):`
      ),
      {
        parse_mode: 'MarkdownV2',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback(state.resource.period ? `${state.resource.period}` : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'use_current_period')],
          [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
        ]).reply_markup,
      }
    );
    await ctx.answerCbQuery();
  }

  @Action('use_current_period')
  async onUseCurrentPeriod(@Ctx() ctx: Scenes.SceneContext) {
    const state = ctx.scene.session.state as UpdateResourceState;
    state.period = state.resource.period ?? null;
    this.logger.debug(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: ${state.period}, state: ${JSON.stringify(state)}`);
    await this.updateResource(ctx, state);
    await ctx.answerCbQuery();
  }

  async updateResource(ctx: Scenes.SceneContext, state: UpdateResourceState) {
    try {
      if (!state.name || !state.url || !state.type || !state.interval) {
        this.logger.warn(`–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è: ${JSON.stringify(state)}`);
        await ctx.reply(
          this.escapeMarkdownV2('–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'),
          { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
        );
        await ctx.scene.leave();
        return;
      }
      const updateData: any = {
        name: state.name,
        url: state.url,
        type: state.type,
        interval: state.interval,
        frequency: state.frequency,
        period: state.period,
        userId: ctx.from?.id?.toString() || '7066816061',
      };
      this.logger.debug(`updateData: ${JSON.stringify(updateData)}`);

      await this.resourceManagementService.updateResource(state.resourceId!, updateData);
      this.logger.log(`–†–µ—Å—É—Ä—Å ID: ${state.resourceId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω`);
      await ctx.reply(
        this.escapeMarkdownV2(`–†–µ—Å—É—Ä—Å ID: ${state.resourceId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!`),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
      );
      await ctx.scene.leave();
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞: ${error.message}`, error.stack);
      await ctx.reply(
        this.escapeMarkdownV2(`–û—à–∏–±–∫–∞: ${error.message}`),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
      );
      await ctx.scene.leave();
    }
  }

  @On('text')
  async onText(@Ctx() ctx: Scenes.SceneContext & { message: { text: string } }) {
    const state = ctx.scene.session.state as UpdateResourceState;
    const text = ctx.message.text.trim();
    const userId = ctx.from?.id?.toString();
    const isSkip = text === '' || text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text === '/Enter';

    this.logger.debug(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: "${text}", isSkip: ${isSkip}, state: ${JSON.stringify(state)}`);

    if (text.startsWith('/')) {
      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –ø—Ä–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –∫–æ–º–∞–Ω–¥–æ–π ${text}`);
      await ctx.reply(
        this.escapeMarkdownV2('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup }
      );
      await ctx.scene.leave();
      return;
    }

    if (!state.resourceId) {
      const resourceId = parseInt(text, 10);
      const resources = await this.notificationService.getResourcesByTelegramId(userId);
      const resource = resources.find(r => r.id === resourceId);
      if (!resource) {
        const sortedResources = resources.sort((a, b) => a.id - b.id);
        const resourceList = sortedResources
          .map(r => `ID: ${r.id}, Name: ${r.name}, URL: ${r.url}`)
          .join('\n');
        const resourceButtons = sortedResources.map(r =>
          Markup.button.callback(`ID: ${r.id}`, `select_id_${r.id}`)
        );
        const buttonsPerRow = 4;
        const buttonRows = [];
        for (let i = 0; i < resourceButtons.length; i += buttonsPerRow) {
          buttonRows.push(resourceButtons.slice(i, i + buttonsPerRow));
        }
        buttonRows.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]);
        
        await ctx.reply(
          `–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n${resourceList}`,
          {
            parse_mode: undefined,
            reply_markup: Markup.inlineKeyboard(buttonRows).reply_markup,
          }
        );
        return;
      }
      state.resourceId = resourceId;
      state.name = null;
      state.url = null;
      state.type = null;
      state.interval = null;
      state.frequency = null;
      state.period = null;
      state.resource = resource;
      this.logger.debug(`–í—ã–±—Ä–∞–Ω —Ä–µ—Å—É—Ä—Å ID: ${resourceId}, state: ${JSON.stringify(state)}`);
      const displayName = resource.name.length > 30 ? resource.name.substring(0, 27) + '...' : resource.name;
      await ctx.reply(
        this.escapeMarkdownV2(
          `–¢–µ–∫—É—â–µ–µ –∏–º—è —Ä–µ—Å—É—Ä—Å–∞: ${resource.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ—Å—É—Ä—Å–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
        ),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(displayName, 'use_current_name')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
          ]).reply_markup,
        }
      );
    } else if (state.name === null) {
      state.name = isSkip ? state.resource.name : text;
      this.logger.debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è: ${state.name}, state: ${JSON.stringify(state)}`);
      const displayUrl = state.resource.url.length > 30 ? state.resource.url.substring(0, 27) + '...' : state.resource.url;
      await ctx.reply(
        this.escapeMarkdownV2(
          `–¢–µ–∫—É—â–∏–π URL —Ä–µ—Å—É—Ä—Å–∞: ${state.resource.url}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL —Ä–µ—Å—É—Ä—Å–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
        ),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(displayUrl, 'use_current_url')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
          ]).reply_markup,
        }
      );
    } else if (state.url === null) {
      let newUrl = isSkip ? state.resource.url : text;
      if (!isSkip) {
        if (!newUrl.match(/^https?:\/\//)) {
          newUrl = `https://${newUrl}`;
        }
        try {
          new URL(newUrl);
        } catch {
          await ctx.reply(
            this.escapeMarkdownV2(
              `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ:\n–¢–µ–∫—É—â–∏–π URL: ${state.resource.url}`
            ),
            {
              parse_mode: 'MarkdownV2',
              reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback(state.resource.url.length > 30 ? state.resource.url.substring(0, 27) + '...' : state.resource.url, 'use_current_url')],
                [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
              ]).reply_markup,
            }
          );
          return;
        }
      }
      state.url = newUrl;
      this.logger.debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω URL: ${state.url}, state: ${JSON.stringify(state)}`);
      await ctx.reply(
        this.escapeMarkdownV2(
          `–¢–µ–∫—É—â–∏–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞: ${state.resource.type}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
        ),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.button.callback('site', 'type_static'),
              Markup.button.callback('mail', 'type_mailer'),
              Markup.button.callback('telegramBot', 'type_telegram'),
            ],
            [Markup.button.callback(state.resource.type, 'use_current_type')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
          ]).reply_markup,
        }
      );
    } else if (state.type === null) {
      if (!isSkip && !['static', 'mailer', 'telegram'].includes(text.toLowerCase())) {
        await ctx.reply(
          this.escapeMarkdownV2(
            `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø. –í—ã–±–µ—Ä–∏—Ç–µ static, mailer, telegram –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ:\n–¢–µ–∫—É—â–∏–π —Ç–∏–ø: ${state.resource.type}`
          ),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
              [
                Markup.button.callback('site', 'type_static'),
                Markup.button.callback('mail', 'type_mailer'),
                Markup.button.callback('telegramBot', 'type_telegram'),
              ],
              [Markup.button.callback(state.resource.type, 'use_current_type')],
              [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]).reply_markup,
          }
        );
        return;
      }
      state.type = isSkip ? state.resource.type : text.toLowerCase();
      this.logger.debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø: ${state.type}, state: ${JSON.stringify(state)}`);
      await ctx.reply(
        this.escapeMarkdownV2(
          `–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${state.resource.interval} –º–∏–Ω—É—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –º–∏–Ω–∏–º—É–º 1, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ):`
        ),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(`${state.resource.interval} –º–∏–Ω—É—Ç`, 'use_current_interval')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
          ]).reply_markup,
        }
      );
    } else if (state.interval === null) {
      let interval;
      if (!isSkip) {
        interval = parseInt(text, 10);
        if (isNaN(interval) || interval < 1) {
          await ctx.reply(
            this.escapeMarkdownV2(
              `–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ:\n–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${state.resource.interval} –º–∏–Ω—É—Ç`
            ),
            {
              parse_mode: 'MarkdownV2',
              reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback(`${state.resource.interval} –º–∏–Ω—É—Ç`, 'use_current_interval')],
                [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
              ]).reply_markup,
            }
          );
          return;
        }
        state.interval = interval;
      } else {
        state.interval = state.resource.interval;
      }
      this.logger.debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${state.interval}, state: ${JSON.stringify(state)}`);
      await ctx.reply(
        this.escapeMarkdownV2(
          `–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: ${state.resource.frequency ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É (—á–∏—Å–ª–æ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):`
        ),
        {
          parse_mode: 'MarkdownV2',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback(state.resource.frequency ? `${state.resource.frequency}` : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'use_current_frequency')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
          ]).reply_markup,
        }
      );
    } else if (state.frequency === null) {
      if (isSkip || text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.frequency = state.resource.frequency ?? null;
        await ctx.reply(
          this.escapeMarkdownV2(
            `–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: ${state.resource.period ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, daily, weekly, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):`
          ),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback(state.resource.period ? `${state.resource.period}` : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'use_current_period')],
              [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]).reply_markup,
          }
        );
      } else {
        const frequency = parseInt(text, 10);
        if (isNaN(frequency) || frequency < 1) {
          await ctx.reply(
            this.escapeMarkdownV2(
              `–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ:\n–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: ${state.resource.frequency ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
            ),
            {
              parse_mode: 'MarkdownV2',
              reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback(state.resource.frequency ? `${state.resource.frequency}` : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'use_current_frequency')],
                [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
              ]).reply_markup,
            }
          );
          return;
        }
        state.frequency = frequency;
        await ctx.reply(
          this.escapeMarkdownV2(
            `–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: ${state.resource.period ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, daily, weekly, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):`
          ),
          {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback(state.resource.period ? `${state.resource.period}` : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'use_current_period')],
              [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ]).reply_markup,
          }
        );
      }
    } else {
      state.period = isSkip || text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? state.resource.period ?? null : text;
      this.logger.debug(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥: ${state.period}, state: ${JSON.stringify(state)}`);
      await this.updateResource(ctx, state);
    }
  }
}