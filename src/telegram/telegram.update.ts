import { Update, Ctx, Start, Command, On } from 'nestjs-telegraf';
import { Context, Scenes, Markup } from 'telegraf';
import { Logger } from '@nestjs/common';
import { NotificationService } from '../notification.service';
import { BotKeyboard } from './bot.keyboard';
import { Message } from 'telegraf/typings/core/types/typegram';
import { ConfigService } from '@nestjs/config';

@Update()
export class TelegramUpdate {
  private readonly logger = new Logger(TelegramUpdate.name);
  private readonly allowedUserIds: string[];

  constructor(
    private readonly notificationService: NotificationService,
    private readonly configService: ConfigService,
  ) {
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ 1: –ü–æ–ª—É—á–∞–µ–º allowedUserIds –∏–∑ ConfigService
    this.allowedUserIds = this.configService.get<string>('ALLOWED_TELEGRAM_IDS', '7066816061,6684314409').split(',');
    this.logger.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞, —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ userIds: ${this.allowedUserIds.join(', ')}`);
  }

  private escapeMarkdownV2(text: string): string {
    return text.replace(/([_*[\]()~`>#+\-=|{:}.!])/g, '\\$1');
  }

  @Start()
  async onStart(@Ctx() ctx: Scenes.SceneContext) {
    const userId = ctx.from?.id?.toString();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç ${ctx.from?.username || 'unknown'}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    try {
      await ctx.telegram.setMyCommands([
        { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: 'status', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ—Å—É—Ä—Å–æ–≤' },
        { command: 'logs', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ id, name –∏–ª–∏ url' },
        { command: 'addresource', description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å' },
        { command: 'updateresource', description: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å' },
        { command: 'deleteresource', description: '–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å' },
        { command: 'menu', description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é' },
      ]);

      await ctx.reply(
        this.escapeMarkdownV2(
          `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from?.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}, –í–∞—à Telegram ID: ${userId}! –Ø üòé –±–æ—Ç –ß–µ–∫–µ—Ä, –º–æ–Ω–∏—Ç–æ—Ä—é —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–æ–æ–±—â–∞—é –æ —Å–±–æ—è—Ö üîù\n` +
            `\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `‚úîÔ∏è /status ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤\n\n` +
            `‚úîÔ∏è /logs <id|name|url> ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ä–µ—Å—É—Ä—Å–∞\n` +
            `  –ü—Ä–∏–º–µ—Ä—ã:\n /logs 1 \n /logs 1xjet \n /logs https://example.com\n\n` +
            `‚úîÔ∏è /addresource ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å\n\n` +
            `‚úîÔ∏è /updateresource ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å\n\n` +
            `‚úîÔ∏è /deleteresource ‚Äî –£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å\n\n` +
            `‚úîÔ∏è /menu ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n\n` +
            `\nüëá –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞. üëá\n` +
            `\n 1 –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å` +
            ` ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å` +
            `\n 2 –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å` +
            ` ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å` +
            `\n 3 –£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å` +
            ` ‚Äî –£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å`,
        ),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
      this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è userId: ${userId}`);
    } catch (error) {
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: ${error.message}, stack: ${error.stack}`);
      await ctx.reply(
        this.escapeMarkdownV2('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'),
        { parse_mode: 'MarkdownV2' },
      );
    }
  }

  @Command('status')
  async onStatus(@Ctx() ctx: Scenes.SceneContext) {
    const userId = ctx.from?.id?.toString();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç ${ctx.from?.username || 'unknown'}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ 3: –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ NotificationService
    let attempts = 3;
    let delay = 1000;
    while (attempts > 0) {
      try {
        const resources = await this.notificationService.getResourcesByTelegramId(userId);
        if (resources.length === 0) {
          await ctx.reply(
            this.escapeMarkdownV2('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.'),
            { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
          );
          this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –¥–ª—è userId: ${userId}, —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
          return;
        }

        const uniqueResources = Array.from(new Map(resources.map((r) => [r.url, r])).values()).sort(
          (a, b) => a.id - b.id,
        );
        const logs = await Promise.all(
          uniqueResources.map(async (resource) => {
            const latestLog = (await this.notificationService.getLogsByResourceId(resource.id))[0];
            const date = latestLog?.createdAt
              ? new Date(latestLog.createdAt).toLocaleString('ru-RU')
              : `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ü§î (—Ä–µ—Å—É—Ä—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω, –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${resource.interval} –º–∏–Ω—É—Ç)`;
            const status = latestLog?.result ? '–†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùå';
            return this.escapeMarkdownV2(
              `üìå ${date} - ${status}\n` +
                `ID: ${resource.id}\n` +
                `Name: ${resource.name}\n` +
                `Url: ${resource.url}\n` +
                `Type: ${resource.type}\n` +
                `Interval: ${resource.interval} –º–∏–Ω\n` +
                `–£–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üëâ /logs ${resource.id}\n`,
            );
          }),
        );

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        const message = logs.join('\n');
        if (message.length > 4000) {
          await ctx.reply(
            this.escapeMarkdownV2(
              '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logs <id> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.',
            ),
            { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
          );
          await ctx.reply(logs.slice(0, 10).join('\n'), {
            parse_mode: 'MarkdownV2',
            reply_markup: BotKeyboard.getMainKeyboard().reply_markup,
          });
        } else {
          await ctx.reply(message, {
            parse_mode: 'MarkdownV2',
            reply_markup: BotKeyboard.getMainKeyboard().reply_markup,
          });
        }
        this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –¥–ª—è userId: ${userId}, –Ω–∞–π–¥–µ–Ω–æ ${resources.length} —Ä–µ—Å—É—Ä—Å–æ–≤`);
        return;
      } catch (error) {
        attempts--;
        this.logger.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status, –ø–æ–ø—ã—Ç–∫–∞ ${4 - attempts}/3: ${error.message}, stack: ${error.stack}`);
        if (attempts === 0) {
          await ctx.reply(
            this.escapeMarkdownV2(
              '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Å—É—Ä—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            ),
            { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
          );
          return;
        }
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay *= 2;
      }
    }
  }

  @Command('logs')
  async onLogs(@Ctx() ctx: Scenes.SceneContext & { message: { text: string } }) {
    const userId = ctx.from?.id?.toString();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /logs –æ—Ç ${ctx.from?.username || 'unknown'}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) {
      await ctx.reply(
        this.escapeMarkdownV2(
          `‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ id, name –∏–ª–∏ url —Ä–µ—Å—É—Ä—Å–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ: /status\n\n` +
            `/logs id|name|url ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ä–µ—Å—É—Ä—Å–∞\n` +
            `–ü—Ä–∏–º–µ—Ä—ã:\n` +
            `/logs 1\n /logs 1xjet\n /logs https://example.com\n\n` +
            `‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ –ª–∏—à–Ω–∏—Ö —Å–ª—ç—à–µ–π –≤ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com –≤–º–µ—Å—Ç–æ https://example.com/)\n` +
            `üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤`,
        ),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
      return;
    }

    const identifier = args.join(' ').trim();
    let attempts = 3;
    let delay = 1000;
    while (attempts > 0) {
      try {
        const resources = await this.notificationService.getResourcesByTelegramId(userId);
        const uniqueResources = Array.from(new Map(resources.map((r) => [r.url, r])).values());
        let resource;

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ 5: –ü–æ–∏—Å–∫ –±–µ–∑ —É—á—ë—Ç–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª—ç—à–∞
        const normalizedIdentifier = identifier.endsWith('/') ? identifier.slice(0, -1) : identifier;
        if (!isNaN(parseInt(normalizedIdentifier))) {
          resource = uniqueResources.find((r) => r.id === parseInt(normalizedIdentifier));
        } else {
          resource = uniqueResources.find(
            (r) =>
              r.name.toLowerCase() === normalizedIdentifier.toLowerCase() ||
              (r.url.endsWith('/') ? r.url.slice(0, -1) : r.url).toLowerCase() ===
                normalizedIdentifier.toLowerCase(),
          );
        }

        if (!resource) {
          const resourceList = uniqueResources
            .map((r) => this.escapeMarkdownV2(`ID: ${r.id}, Name: ${r.name}, URL: ${r.url}`))
            .join('\n');
          await ctx.reply(
            this.escapeMarkdownV2(
              `–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id, name –∏–ª–∏ url.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n${resourceList}`,
            ),
            { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
          );
          return;
        }

        const logs = await this.notificationService.getLogsByResourceId(resource.id);
        if (logs.length === 0) {
          await ctx.reply(
            this.escapeMarkdownV2(`–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞ ${resource.name} (ID: ${resource.id}).`),
            { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
          );
          return;
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ 6: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON
        const logMessages = logs.slice(0, 5).map((log) => {
          const date = new Date(log.createdAt).toLocaleString('ru-RU');
          const status = log.result ? 'success ‚úÖ' : 'error ‚ùå';
          let response;
          try {
            const parsed = JSON.parse(log.response);
            response = parsed.response || parsed.error || log.response;
          } catch (parseError) {
            this.logger.warn(
              `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ –ª–æ–≥–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞ ${resource.id}: ${parseError.message}, log.response: ${log.response}`,
            );
            response = log.response;
          }
          return this.escapeMarkdownV2(
            `${date} - status: ${status}\n` +
              `response: ${response.slice(0, 100)}\n` +
              (log.status ? `statusCode: ${log.status}\n` : ''),
          );
        });

        const message = logMessages.join('\n');
        if (message.length > 4000) {
          await ctx.reply(
            this.escapeMarkdownV2(
              `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–æ–≥–æ–≤! –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5.\n–†–µ—Å—É—Ä—Å: ${resource.name} (ID: ${resource.id})`,
            ),
            { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
          );
          await ctx.reply(message, {
            parse_mode: 'MarkdownV2',
            reply_markup: BotKeyboard.getMainKeyboard().reply_markup,
          });
        } else {
          await ctx.reply(message, {
            parse_mode: 'MarkdownV2',
            reply_markup: BotKeyboard.getMainKeyboard().reply_markup,
          });
        }
        this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /logs –¥–ª—è userId: ${userId}, —Ä–µ—Å—É—Ä—Å ID: ${resource.id}`);
        return;
      } catch (error) {
        attempts--;
        this.logger.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /logs, –ø–æ–ø—ã—Ç–∫–∞ ${4 - attempts}/3: ${error.message}, stack: ${error.stack}`);
        if (attempts === 0) {
          await ctx.reply(
            this.escapeMarkdownV2(
              `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å id, name –∏–ª–∏ url, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            ),
            { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
          );
          return;
        }
        await new Promise((resolve) => setTimeout(resolve, delay));
        delay *= 2;
      }
    }
  }

  @Command('addresource')
  async onAddResource(@Ctx() ctx: Scenes.SceneContext) {
    const userId = ctx.from?.id?.toString();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /addresource –æ—Ç ${ctx.from?.username || 'unknown'}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    try {
      await ctx.scene.enter('add_resource_scene');
      this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É add_resource_scene –¥–ª—è userId: ${userId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É add_resource_scene: ${error.message}, stack: ${error.stack}`);
      await ctx.reply(
        this.escapeMarkdownV2('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
    }
  }

  @Command('updateresource')
  async onUpdateResource(@Ctx() ctx: Scenes.SceneContext) {
    const userId = ctx.from?.id?.toString();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /updateresource –æ—Ç ${ctx.from?.username || 'unknown'}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    try {
      await ctx.scene.enter('update_resource_scene');
      this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É update_resource_scene –¥–ª—è userId: ${userId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É update_resource_scene: ${error.message}, stack: ${error.stack}`);
      await ctx.reply(
        this.escapeMarkdownV2('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
    }
  }

  @Command('deleteresource')
  async onDeleteResource(@Ctx() ctx: Scenes.SceneContext) {
    const userId = ctx.from?.id?.toString();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /deleteresource –æ—Ç ${ctx.from?.username || 'unknown'}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    try {
      await ctx.scene.enter('delete_resource_scene');
      this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É delete_resource_scene –¥–ª—è userId: ${userId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É delete_resource_scene: ${error.message}, stack: ${error.stack}`);
      await ctx.reply(
        this.escapeMarkdownV2('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
    }
  }

  @Command('menu')
  async onMenu(@Ctx() ctx: Scenes.SceneContext) {
    const userId = ctx.from?.id?.toString();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu –æ—Ç ${ctx.from?.username || 'unknown'}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    try {
      await ctx.reply(
        this.escapeMarkdownV2('üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üëá'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
      this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è userId: ${userId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /menu: ${error.message}, stack: ${error.stack}`);
      await ctx.reply(
        this.escapeMarkdownV2('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
    }
  }

  @On('text')
  async onText(@Ctx() ctx: Scenes.SceneContext & { message: Message.TextMessage }) {
    const userId = ctx.from?.id?.toString();
    const text = ctx.message.text.trim();
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from?.username || 'unknown'}: ${text}, Telegram ID: ${userId || 'unknown'}`);
    if (!userId || !this.allowedUserIds.includes(userId)) {
      await ctx.reply(this.escapeMarkdownV2('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), {
        parse_mode: 'MarkdownV2',
      });
      return;
    }

    if (text.startsWith('/')) {
      return;
    }

    try {
      if (text === '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å') {
        await ctx.scene.enter('add_resource_scene');
        this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É add_resource_scene –¥–ª—è userId: ${userId}`);
      } else if (text === '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å') {
        await ctx.scene.enter('update_resource_scene');
        this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É update_resource_scene –¥–ª—è userId: ${userId}`);
      } else if (text === '–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å') {
        await ctx.scene.enter('delete_resource_scene');
        this.logger.debug(`–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É delete_resource_scene –¥–ª—è userId: ${userId}`);
      } else {
        await ctx.reply(
          this.escapeMarkdownV2(
            'üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /status, /logs, /addresource, /updateresource, /deleteresource –∏–ª–∏ /menu.',
          ),
          { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
        );
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "${text}": ${error.message}, stack: ${error.stack}`);
      await ctx.reply(
        this.escapeMarkdownV2('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
        { parse_mode: 'MarkdownV2', reply_markup: BotKeyboard.getMainKeyboard().reply_markup },
      );
    }
  }
}